@page "/"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using ChatApp.ViewModels
@using ChatApp.BLL.Models

@inject ProtectedSessionStorage Storage
@inject NavigationManager NavigationManager

<PageTitle>ChatApp</PageTitle>

@if (_accessToken == null)
{
    if (_signUp)
    {
        <SignUp />
        <button class="btn btn-primary" @onclick="() => _signUp = false">
            I already have an account
        </button>
    }
    else
    {
        <SignIn />
        <button class="btn btn-primary" @onclick="() => _signUp = true">
            I don't have an account
        </button>
    }
}
else
{
    <h1>Welcome, @_accessToken.UserName!</h1>
    <button class="btn btn-primary" @onclick="Logout">Log out</button>
    if (_displayChangePassword)
    {
        <ChangePassword />
    }
    else
    {
        <button class="btn btn-primary"
                @onclick="() => _displayChangePassword = true">
            Change password
        </button>
    }
}

@code {
    private LoginResult? _accessToken;
    private readonly LoginViewModel _loginViewModel = new();
    private bool _signUp;
    private bool _displayChangePassword;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);
        }
        
        var task = 
            await Storage.GetAsync<LoginResult>("access_token");
        _accessToken = task.Value;
        if (_accessToken != null)
        {
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async void Logout()
    {
        await Storage.DeleteAsync("access_token");
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }
}