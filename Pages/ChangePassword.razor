@using ChatApp.ViewModels
@using System.Text.Json
@using System.Net
@using System.Net.Http.Headers
@using ChatApp.BLL.Models
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject HttpClient Http
@inject ProtectedSessionStorage Storage
@inject NavigationManager NavigationManager

<h3 class="mt-2">ChangePassword</h3>

<EditForm Model="_passwordChangeViewModel" OnValidSubmit="Change">
    <DataAnnotationsValidator />
    <CustomValidator @ref="_customValidator" />
    <ValidationSummary />
    
    <label class="form-label row w-50">
        Old password:
        <InputText type="password" 
                   @bind-Value="_passwordChangeViewModel.OldPassword"/>
    </label>
    <label class="form-label row w-50">
        New password:
        <InputText type="password" 
                   @bind-Value="_passwordChangeViewModel.NewPassword"/>
    </label>
    <label class="form-label row w-50">
        Confirm new password:
        <InputText type="password" 
                   @bind-Value="_passwordChangeViewModel.ConfirmNewPassword"/>
    </label>
    <button class="btn btn-primary row" type="submit">Submit</button>
</EditForm>

@code {
    private readonly PasswordChangeViewModel _passwordChangeViewModel = new();
    private CustomValidator? _customValidator;

    private async void Change()
    {
        _customValidator?.ClearErrors();

        var token =
            await Storage.GetAsync<LoginResult>("access_token");
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(
            "Bearer", token.Value!.AccessToken);
        var response = await Http.PostAsJsonAsync(
            "auth/change", _passwordChangeViewModel);
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
            return;
        }

        if (response.StatusCode == HttpStatusCode.Unauthorized)
        {
            _customValidator?.DisplayErrors(new Dictionary<string, List<string>>
            {{string.Empty, new List<string> {"Wrong password!"}}});
            return;
        }

        var errors = await response.Content
            .ReadFromJsonAsync<Dictionary<string, List<string>>>();
        _customValidator?.DisplayErrors(errors!);
    }
}