@using ChatApp.ViewModels
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using ChatApp.BLL.Models
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net.Http.Headers

@inject ProtectedSessionStorage Storage
@inject NavigationManager NavigationManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">ChatApp</a>
        <button title="Navigation menu" class="navbar-toggler" 
                @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" 
                     href="" Match="NavLinkMatch.All">
                <span class="oi oi-person" aria-hidden="true"></span> 
                Profile
            </NavLink>
        </div>
        @if (_token != null)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" 
                         href="personal-chats" Match="NavLinkMatch.All">
                    <span class="oi oi-chat" aria-hidden="true"></span> 
                    Personal chats
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" 
                         href="group-chats" Match="NavLinkMatch.All">
                    <span class="oi oi-chat" aria-hidden="true"></span> 
                    Group chats
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool _collapseNavMenu = true;
    private IEnumerable<ChatView> _chats = new List<ChatView>();
    private string? NavMenuCssClass => _collapseNavMenu ? "collapse" : null;
    private HubConnection? _hubConnection = null;
    private string? _token;
    
    private void ToggleNavMenu()
    {
        _collapseNavMenu = !_collapseNavMenu;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var valueToken = 
            await Storage.GetAsync<LoginResult>("access_token");
        _token = valueToken.Value?.AccessToken;
        if (_token == null)
        {
            await base.OnAfterRenderAsync(firstRender);
            return;
        }
        
        StateHasChanged();

        await base.OnAfterRenderAsync(firstRender);
    }
}