@typeparam T
@using System.Reflection
@using ChatApp.DAL.Entities
@using ChatApp.ViewModels
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage Storage

@if (_dataSource != null && _info != null)
{
    <table class="table">
        <thead>
        <tr>
            @foreach (var member in _info)
            {
                if (member.MemberType == MemberTypes.Property)
                {
                    <th>@member.Name</th>
                }
            }
        </tr>
        </thead>
        <tbody>
        @foreach (var item in _dataSource)
        {
            <tr @onclick="() => Callback(GetChatName(item))">
                @foreach (var member in _info)
                {
                    if (member.MemberType == MemberTypes.Property)
                    {
                        <td>
                            @item!.GetType().GetProperty(member.Name)!.GetValue(item)
                        </td>
                    }
                }
            </tr>
        }
        </tbody>
    </table>
    <span>Page @(_skip / BatchSize + 1)</span>
    <button class="btn btn-primary mt-1" @onclick="Previous">
        Previous page
    </button>
    <button class="btn btn-primary mt-1" @onclick="Next">
        Next page
    </button>
    @foreach (var member in _info)
    {
        if (member.MemberType == MemberTypes.Property)
        {
            <button class="btn btn-primary mx-1" 
                    @onclick="() => ChangeSort(member.Name)">
                @if (_currentSort == member.Name)
                {
                    if (_sortDesc)
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-down" viewBox="0 0 16 16">
                            <path d="M3.5 2.5a.5.5 0 0 0-1 0v8.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L3.5 11.293V2.5zm3.5 1a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zM7.5 6a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5zm0 3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1h-3zm0 3a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1h-1z"/>
                        </svg>
                    }
                    else
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-up" viewBox="0 0 16 16">
                            <path d="M3.5 12.5a.5.5 0 0 1-1 0V3.707L1.354 4.854a.5.5 0 1 1-.708-.708l2-1.999.007-.007a.498.498 0 0 1 .7.006l2 2a.5.5 0 1 1-.707.708L3.5 3.707V12.5zm3.5-9a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zM7.5 6a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5zm0 3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1h-3zm0 3a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1h-1z"/>
                        </svg>
                    }
                }

                Sort by @member.Name
            </button>
        }
    }
}

@code {
    [Parameter] public string Name { get; set; } = null!;
    [Parameter] public string DefaultSortBy { get; set; } = null!;
    [Parameter] public Func<T, string> GetChatName { get; set; } = null!;
    [Parameter] public HubConnection HubConnection { get; set; } = null!;
    [Parameter] public string Token { get; set; } = null!;
    [Parameter] public Action<string> Callback { get; set; } = null!;

    private const int BatchSize = 16;

    private List<T>? _dataSource;
    private MemberInfo[]? _info;
    private bool _sortDesc;
    private string _currentSort = null!;
    private int _skip;

    private async void RefreshData()
    {
        await HubConnection.InvokeAsync("Get" + Name, 
            _skip, BatchSize, _currentSort, _sortDesc);
    }
    
    private void Previous()
    {
        if (_skip <= 0)
        {
            return;
        }
        
        _skip -= BatchSize;
        RefreshData();
    }

    private void Next()
    {
        if (_dataSource is not {Count: BatchSize})
        {
            return;
        }
        
        _skip += BatchSize;
        RefreshData();
    }
    
    private void ChangeSort(string name)
    {
        if (_currentSort == name)
        {
            _sortDesc = !_sortDesc;
        }
        else
        {
            _sortDesc = false;
        }

        _currentSort = name;
        _skip = 0;
        StateHasChanged();
        RefreshData();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        HubConnection.On("Get" + Name,
            (List<T> data) =>
            {
                _dataSource = data;
                var type = _dataSource[0]!.GetType();
                _info = type.GetMembers();
                StateHasChanged();
            });
        _currentSort = DefaultSortBy;
        RefreshData();
    }
}